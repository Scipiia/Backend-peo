package save

import (
	"encoding/json"
	"github.com/go-chi/render"
	"log/slog"
	"net/http"
	"strconv"
	"vue-golang/internal/storage"
)

type ResultNorm interface {
	SaveNormOrder(result storage.OrderDetails) (int64, error)
	SaveNormOperation(OrderID int64, operations []storage.NormOperation) error
}

type Response struct {
	OrderID int64 `json:"order_id"`
	Status  string
	Error   string
}

func SaveNormOrderOperation(log *slog.Logger, res ResultNorm) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		const op = "handlers.normirovka.SaveNormOrderOperation"

		//var req RequestNormData
		var req storage.OrderDetails
		err := json.NewDecoder(r.Body).Decode(&req)
		if err != nil {
			log.Error("–ù–µ–≤–µ—Ä–Ω—ã–π JSON", slog.String("op", op), slog.String("error", err.Error()))
			http.Error(w, "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", http.StatusBadRequest)
			return
		}

		// --- üîç –ü–†–û–í–ï–†–ö–ê: –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º 0 ---
		//var zeroOps []string
		//for _, op := range req.Operations {
		//	// –ï—Å–ª–∏ value == 0, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
		//	if op.Value == 0 {
		//		zeroOps = append(zeroOps, op.Name)
		//	}
		//}
		//
		//if len(zeroOps) > 0 {
		//	log.Warn("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º 0",
		//		slog.String("op", op),
		//		slog.Any("zero_ops", zeroOps),
		//		slog.String("order_num", req.OrderNum),
		//	)
		//
		//	// –û—Ç–≤–µ—Ç —Å –ø–æ–Ω—è—Ç–Ω–æ–π –æ—à–∏–±–∫–æ–π
		//	render.JSON(w, r, Response{
		//		Error: "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º 0: " + strings.Join(zeroOps, ", "),
		//	})
		//	return
		//}
		// --- ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ ---

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
		orderID, err := res.SaveNormOrder(req)
		if err != nil {
			log.Info("–û—à–∏–±–∫–∞ —Ä–µ–∫–≤–µ—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –≤ –±–∞–∑—É –∑–∞–∫–∞–∑–∞ —Å—É–∫–∞ –±–ª—è—Ç—å —É–µ–±–∏—â–µ —Ç—É–ø–æ—Ä—ã–ª–æ–µ DOOR –µ–±–∞–Ω—ã–µ", err)
			render.JSON(w, r, Response{Error: "da bleeeat"})
			return
		}

		log.Info("RREEQWQWWQ", req.Operations)
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
		err = res.SaveNormOperation(orderID, req.Operations)
		if err != nil {
			log.Info("–û—à–∏–±–∫–∞ —Ä–µ–∫–≤–µ—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –≤ –±–∞–∑—É –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å—É–∫–∞ –±–ª—è—Ç—å —É–µ–±–∏—â–µ —Ç—É–ø–æ—Ä—ã–ª–æ–µ ROOOT –µ–±–∞–Ω—ã–µ", err)
			render.JSON(w, r, Response{Error: "da bleeeat1"})
			return
		}

		log.Info("message added", slog.Int64("id", orderID))

		render.JSON(w, r, Response{
			OrderID: orderID,
			Status:  strconv.Itoa(http.StatusOK),
			Error:   "",
		})
	}
}
