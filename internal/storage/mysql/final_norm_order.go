package mysql

import (
	"database/sql"
	"errors"
	"fmt"
	"vue-golang/internal/storage"
)

func (s *Storage) GetFinalNormOrders() ([]storage.ReportFinalOrders, error) {
	const op = "storage.mysql.GetFinalNormOrders"

	query := `
			SELECT DISTINCT
				pi.order_num,
				MIN(pi.created_at) AS first_created,
				COUNT(DISTINCT pi.id) AS product_count
			FROM product_instances pi
			JOIN operation_executors oe ON pi.id = oe.product_id
			GROUP BY pi.order_num
			ORDER BY first_created DESC
		`

	rows, err := s.db.Query(query)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, fmt.Errorf("%s: –∑–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: %w", op, err)
		}
		return nil, fmt.Errorf("%s: –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %w", op, err)
	}
	defer rows.Close()

	var items []storage.ReportFinalOrders
	for rows.Next() {
		var item storage.ReportFinalOrders
		err := rows.Scan(&item.OrderNum, &item.FirstCreated, &item.IzdCount)
		if err != nil {
			return nil, fmt.Errorf("%s: –æ—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –≥–æ—Ç–æ–≤—ã—Ö –∏–∑–¥–µ–ª–∏–∏: %w", op, err)
		}
		items = append(items, item)
	}

	return items, err
}

func (s *Storage) GetSimpleOrderReport(orderNum string) (*storage.OrderFinalReport, error) {
	const op = "storage.mysql.GetSimpleOrderReport"

	query := `
		SELECT
			pi.id,
			pi.order_num,
			pi.name,
			t.name AS template_name,
			ov.operation_name,
			ov.operation_label,
			ov.minutes AS norm_minutes,
			e.name AS employee_name,
			oe.actual_minutes,
			oe.actual_value
		FROM product_instances pi
		JOIN templates t ON pi.template_code = t.code
		JOIN operation_values ov ON pi.id = ov.product_id
		LEFT JOIN operation_executors oe ON ov.product_id = oe.product_id AND ov.operation_name = oe.operation_name
		LEFT JOIN employees e ON oe.employee_id = e.id
		WHERE pi.order_num = ?
		ORDER BY pi.id, ov.operation_name;
	`

	rows, err := s.db.Query(query, orderNum)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, fmt.Errorf("%s: –∑–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: %w", op, err)
		}
		return nil, fmt.Errorf("%s: –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %w", op, err)
	}
	defer rows.Close()

	report := &storage.OrderFinalReport{
		OrderNum: orderNum,
		Izdelie:  []storage.IzdelieInfo{},
	}

	// üîë –ú–∞–ø–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–∑–¥–µ–ª–∏—é –ø–æ ID
	productMap := make(map[int64]*storage.IzdelieInfo)

	for rows.Next() {
		var (
			productID      int64
			productName    string
			templateName   string
			operationName  string
			operationLabel string
			normMinutes    float64
			employeeName   sql.NullString
			actualMinutes  sql.NullFloat64
			actualValue    sql.NullFloat64
		)

		// üîΩ –°–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–ª—è –∏–∑ —Å—Ç—Ä–æ–∫–∏
		err := rows.Scan(
			&productID,
			&orderNum, // –º–æ–∂–Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –Ω–æ –Ω—É–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å
			&productName,
			&templateName,
			&operationName,
			&operationLabel,
			&normMinutes,
			&employeeName,
			&actualMinutes,
			&actualValue,
		)
		if err != nil {
			return nil, fmt.Errorf("%s: –æ—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏: %w", op, err)
		}

		// üîç –®–ê–ì 1: –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∏–∑–¥–µ–ª–∏–µ
		izd, exists := productMap[productID]
		if !exists {
			izd = &storage.IzdelieInfo{
				ID:           productID,
				Name:         productName,
				TemplateName: templateName,
				Operations:   []storage.OperationsNorm{},
			}
			productMap[productID] = izd
		}

		// üîç –®–ê–ì 2: –ù–∞–π—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏—é –≤ —ç—Ç–æ–º –∏–∑–¥–µ–ª–∏–∏
		var opNorm *storage.OperationsNorm
		for i := range izd.Operations {
			if izd.Operations[i].OperationName == operationName {
				opNorm = &izd.Operations[i]
				break
			}
		}

		// –ï—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ ‚Äî —Å–æ–∑–¥–∞—ë–º
		if opNorm == nil {
			opNorm = &storage.OperationsNorm{
				OperationName:  operationName,
				OperationLabel: operationLabel,
				NormMinutes:    normMinutes,
				Executors:      []storage.Workers{},
			}
			izd.Operations = append(izd.Operations, *opNorm)
			// –æ–±–Ω–æ–≤–ª—è–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å, –ø–æ—Ç–æ–º—É —á—Ç–æ —Å–ª–∞–π—Å –º–æ–≥ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è
			opNorm = &izd.Operations[len(izd.Operations)-1]
		}

		// üîç –®–ê–ì 3: –î–æ–±–∞–≤–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å (—Ç–æ –µ—Å—Ç—å –µ—Å–ª–∏ e.name NOT NULL)
		if employeeName.Valid {
			worker := storage.Workers{
				WorkerName:    employeeName.String,
				ActualMinutes: actualMinutes.Float64, // –±—É–¥–µ—Ç 0, –µ—Å–ª–∏ NULL
				ActualValue:   actualValue.Float64,   // –±—É–¥–µ—Ç 0, –µ—Å–ª–∏ NULL
			}
			opNorm.Executors = append(opNorm.Executors, worker)
		}
	}

	// üîÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ –ø–æ—Å–ª–µ —Ü–∏–∫–ª–∞
	if err = rows.Err(); err != nil {
		return nil, fmt.Errorf("%s: –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫: %w", op, err)
	}

	// üì¶ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞–ø—É –≤ —Å—Ä–µ–∑
	for _, izd := range productMap {
		report.Izdelie = append(report.Izdelie, *izd)
	}

	return report, nil
}
