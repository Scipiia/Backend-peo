package main

import (
	"context"
	"log/slog"
	"net/http"
	"os"
	"vue-golang/internal/config"
	"vue-golang/internal/storage/mysql"
)

const (
	envLocal = "local"
	envDev   = "dev"
	envProd  = "prod"
)

func main() {
	cfg := config.MustConfig()

	log := setupLogger(cfg.Env)

	storage, err := mysql.New()
	if err != nil {
		log.Error("failed to open db", err)
		os.Exit(1)
	}

	log.Info("server started", slog.String("address", cfg.Address))

	srv := &http.Server{
		Addr:         cfg.Address,
		Handler:      routes(*cfg, log, storage),
		ReadTimeout:  cfg.HTTPServer.Timeout,
		WriteTimeout: cfg.HTTPServer.Timeout,
		IdleTimeout:  cfg.HTTPServer.IdleTimeout,
	}

	err = srv.ListenAndServe()
	if err != nil {
		log.Error("failed start server ", err)
	}

	log.Error("server stopped")
}

//func setupLogger(env string) *slog.Logger {
//	var log *slog.Logger
//
//	switch env {
//	case envLocal:
//		log = slog.New(slog.NewTextHandler(os.Stdout, &slog.HandlerOptions{Level: slog.LevelDebug}))
//	case envDev:
//		log = slog.New(slog.NewJSONHandler(os.Stdout, &slog.HandlerOptions{Level: slog.LevelDebug}))
//	case envProd:
//		log = slog.New(slog.NewTextHandler(os.Stdout, &slog.HandlerOptions{Level: slog.LevelInfo}))
//	}
//
//	return log
//}

type dualHandler struct {
	coreHandler  slog.Handler
	errorHandler slog.Handler
}

func (h *dualHandler) Enabled(ctx context.Context, lvl slog.Level) bool {
	// –†–∞–∑—Ä–µ—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ —Ö–æ—Ç—å –æ–¥–∏–Ω –∏–∑ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å
	return h.coreHandler.Enabled(ctx, lvl) || h.errorHandler.Enabled(ctx, lvl)
}

func (h *dualHandler) Handle(ctx context.Context, r slog.Record) error {
	var err error

	// 1. –í—Å–µ–≥–¥–∞ –ø–∏—à–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –≤—ã–≤–æ–¥ (stdout)
	if h.coreHandler.Enabled(ctx, r.Level) {
		err = h.coreHandler.Handle(ctx, r)
		if err != nil {
			return err
		}
	}

	// 2. –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ ‚Äî –ø–∏—à–µ–º –≤ —Ñ–∞–π–ª
	if r.Level >= slog.LevelError && h.errorHandler.Enabled(ctx, r.Level) {
		// –ö–ª–æ–Ω–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å, –ø–æ—Ç–æ–º—É —á—Ç–æ Handle –º–æ–∂–µ—Ç –º—É—Ç–∏—Ä–æ–≤–∞—Ç—å
		cloned := r.Clone()
		fileErr := h.errorHandler.Handle(ctx, cloned)
		if fileErr != nil {
			// –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫, –Ω–æ –º–æ–∂–µ–º –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É
			// (—Ö–æ—Ç—è –∑–¥–µ—Å—å —É–∂–µ —Å–ª–æ–∂–Ω–æ ‚Äî –ª—É—á—à–µ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å)
		}
	}

	return err
}

func (h *dualHandler) WithAttrs(attrs []slog.Attr) slog.Handler {
	return &dualHandler{
		coreHandler:  h.coreHandler.WithAttrs(attrs),
		errorHandler: h.errorHandler.WithAttrs(attrs),
	}
}

func (h *dualHandler) WithGroup(name string) slog.Handler {
	return &dualHandler{
		coreHandler:  h.coreHandler.WithGroup(name),
		errorHandler: h.errorHandler.WithGroup(name),
	}
}

func setupLogger(env string) *slog.Logger {
	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	var level slog.Level = slog.LevelDebug
	switch env {
	case envProd:
		level = slog.LevelInfo
	}

	// 1. –û—Å–Ω–æ–≤–Ω–æ–π handler ‚Äî –ø–∏—à–µ—Ç –í–°–Å –≤ stdout
	var coreHandler slog.Handler
	switch env {
	case envLocal:
		coreHandler = slog.NewTextHandler(os.Stdout, &slog.HandlerOptions{Level: level})
	case envDev:
		coreHandler = slog.NewJSONHandler(os.Stdout, &slog.HandlerOptions{Level: level})
	case envProd:
		coreHandler = slog.NewTextHandler(os.Stdout, &slog.HandlerOptions{Level: level})
	default:
		coreHandler = slog.NewTextHandler(os.Stdout, &slog.HandlerOptions{Level: level})
	}

	// 2. –§–∞–π–ª–æ–≤—ã–π handler ‚Äî —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏
	errorFile, err := os.OpenFile("errors.log", os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0666)
	if err != nil {
		// –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª, —Ö–æ—Ç—è –±—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
		slog.Warn("Cannot open error log file", "error", err)
		return slog.New(coreHandler) // –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —Ñ–∞–π–ª–∞
	}

	errorHandler := slog.NewTextHandler(errorFile, &slog.HandlerOptions{
		Level: slog.LevelError, // –¢–æ–ª—å–∫–æ error –∏ –≤—ã—à–µ
	})

	// 3. –û–±—ä–µ–¥–∏–Ω—è–µ–º —á–µ—Ä–µ–∑ –∫–∞—Å—Ç–æ–º–Ω—ã–π handler
	handler := &dualHandler{
		coreHandler:  coreHandler,
		errorHandler: errorHandler,
	}

	// –°–æ–∑–¥–∞—ë–º –ª–æ–≥–≥–µ—Ä
	logger := slog.New(handler)

	// üí° –°–æ—Ö—Ä–∞–Ω–∏—Ç—å errorFile –≥–¥–µ-—Ç–æ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –≤ –±—É–¥—É—â–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ graceful shutdown)
	// –ù–æ –µ—Å–ª–∏ –ª–æ–≥–≥–µ—Ä –≥–ª–æ–±–∞–ª—å–Ω—ã–π ‚Äî –º–æ–∂–Ω–æ –Ω–µ –∑–∞–∫—Ä—ã–≤–∞—Ç—å —è–≤–Ω–æ, –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å sync.Pool / –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ.
	return logger
}
